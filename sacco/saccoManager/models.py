from django.db import models

# Create your models here.
from django.db import models
from django.utils import timezone
from django.core.exceptions import ValidationError
from django.contrib import settings
class Sacco(models.Model):
    """
    Represents the core Sacco object that aggregates and manages Sacco attributes.
    """

    # Basic Information
    name = models.CharField(max_length=255, unique=True)  # Sacco Name
    registration_number = models.CharField(max_length=100, unique=True)  # Unique Registration Number
    established_date = models.DateField()  # Date the Sacco was established
    address = models.TextField()  # Physical or postal address
    contact_email = models.EmailField()  # Contact email
    contact_phone = models.CharField(max_length=15)  # Contact phone number

    # Financial Attributes
    total_savings = models.DecimalField(max_digits=15, decimal_places=2, default=0.0)  # Total savings across members
    total_loans_disbursed = models.DecimalField(max_digits=15, decimal_places=2, default=0.0)  # Total loan amount disbursed
    total_revenue = models.DecimalField(max_digits=15, decimal_places=2, default=0.0)  # Total revenue generated by Sacco
    total_investments_value = models.DecimalField(max_digits=15, decimal_places=2, default=0.0)  # Total value of investments

    # Relationships (Assume these models are already created)
    members = models.ManyToManyField("Member", related_name="saccos")  # Members of the Sacco
    loans = models.ManyToManyField("Loan", related_name="saccos")  # Loans issued by the Sacco
    investments = models.ManyToManyField("Investment", related_name="saccos")  # Investments managed by the Sacco
    savings = models.ManyToManyField("Saving", related_name="saccos")  # Savings contributions by members

    # Status & Management
    is_active = models.BooleanField(default=True)  # Is the Sacco active or inactive?
    created_at = models.DateTimeField(auto_now_add=True)  # Timestamp when the Sacco record was created
    updated_at = models.DateTimeField(auto_now=True)  # Timestamp when the Sacco record was last updated

    def __str__(self):
        return self.name

    # Business Logic Methods
    @property
    def total_members(self):
        """
        Returns the total number of members in the Sacco.
        """
        return self.members.count()

    @property
    def total_loans_outstanding(self):
        """
        Calculates the total outstanding loan amount.
        """
        return self.loans.filter(is_paid=False).aggregate(total=models.Sum("amount"))["total"] or 0

    @property
    def total_profit(self):
        """
        Calculates the total profit for the Sacco.
        Formula: Total Revenue - Total Expenses (e.g., loan interests, operational costs, etc.)
        """
        total_expenses = self.loans.aggregate(total=models.Sum("interest"))["total"] or 0
        return self.total_revenue - total_expenses

    @property
    def investment_summary(self):
        """
        Returns a summary of the Sacco's investments.
        """
        return {
            "total_investments": self.investments.count(),
            "total_invested_amount": self.investments.aggregate(total=models.Sum("amount_invested"))["total"] or 0,
            "current_value": self.investments.aggregate(total=models.Sum("current_value"))["total"] or 0,
        }
